{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(router) {\n      this.router = router;\n    }\n\n    intercept(request, next) {\n      // Get the token from localStorage\n      const token = localStorage.getItem('token'); // Clone the request and add the token to the headers if it exists\n\n      if (token) {\n        const authReq = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        return next.handle(authReq).pipe(tap(() => {}, err => {\n          //handle 401 error globally\n          if (err instanceof HttpErrorResponse) {\n            if (err.status !== 401) {\n              return;\n            }\n\n            localStorage.clear();\n            this.router.navigate(['login']);\n          }\n        }));\n      } // If there's no token, just pass the original request\n\n\n      return next.handle(request).pipe(tap(() => {}, err => {\n        //handle 401 error globally\n        if (err instanceof HttpErrorResponse) {\n          if (err.status !== 401) {\n            return;\n          }\n\n          localStorage.clear();\n          this.router.navigate(['login']);\n        }\n      }));\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.Router));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}